# !/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch/status of the current git repository
#    * the return value of the previous command
#    * the fact you just came from Windows and are used to having newlines in
#      your prompts.
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        . ~/.bash_prompt
#
# LINEAGE:
#
#   Based on work by woods
#
#   https://gist.github.com/31967

# The various escape codes that we can use to color our prompt.
           RED="\[\033[0;31m\]"
        YELLOW="\[\033[1;33m\]"
         GREEN="\[\033[0;32m\]"
          BLUE="\[\033[1;34m\]"
     LIGHT_RED="\[\033[0;31m\]"
   LIGHT_GREEN="\[\033[1;32m\]"
         WHITE="\[\033[1;37m\]"
    LIGHT_GRAY="\[\033[0;37m\]"
    COLOR_NONE="\[\e[0m\]"
SILVER__YELLOW="\[\033[40;1;33m\]"
 SILVER__WHITE="\[\033[40;1;37m\]"
    RED__WHITE="\[\033[41;1;37m\]"
  GREEN__WHITE="\[\033[42;1;37m\]"
 YELLOW__WHITE="\[\033[43;1;37m\]"
   BLUE__WHITE="\[\033[44;1;37m\]"
  PINK__YELLOW="\[\033[45;1;33m\]"
   PINK__WHITE="\[\033[45;1;37m\]"
 CIANO__YELLOW="\[\033[46;1;33m\]"
  CIANO__WHITE="\[\033[46;1;37m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "nada a submeter" ]] || [[ ${git_status} =~ "nothing to commit" ]]; then
    state="${GREEN__WHITE}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${YELLOW__WHITE}"
  else
    state="${RED__WHITE}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Set the final branch string.
  BRANCH=" ${state}[$(./current_branch)]${remote}${COLOR_NONE}"
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $UID -eq 0 ; then
      PROMPT_SYMBOL="${RED} \\$ ${COLOR_NONE}"
      PROMPT_IDENT="${RED}\h ${COLOR_NONE}"
  else
      PROMPT_SYMBOL="${LIGHT_GREEN}\\$ ${COLOR_NONE}"
      PROMPT_IDENT="${LIGHT_GREEN}\u@\h ${COLOR_NONE}"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV=" ${YELLOW}(`basename \"$VIRTUAL_ENV)\"`${COLOR_NONE}"
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="${PROMPT_IDENT}${BLUE}\w${PYTHON_VIRTUALENV}${BRANCH} ${PROMPT_SYMBOL}"
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
#export PROMPT_COMMAND
